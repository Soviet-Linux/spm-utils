#!/bin/env python3
# This files is used to create spm package easily
"""
This  script is the less optimized i made in my entire life , im currently realizing how its really bad,
but its python so its not really important.
Also , i dont think anyone will notice , because its pretty small
Its not like i made a package manager in python .
Fedora... where are you going ?
Seriously , i hope that the cccp will at least be better than dnf.
"""
import json
from os import system,getcwd
from sys import argv
basicPattern = """
{
    "name" : "",
    "type" : "",
    "version" : "",
    "dependencies" : [],
    "info" : 
    {
        "prepare" : "",
        "make" : "",
        "test" : "",
        "install" : "",
        "special" : ""
        
    },
    "locations" : []
}
"""
if  argv[-1] == "m" or argv[-1] == "e"  :
    name = input("name : ")
    print("Creating %s package pattern !" % name)
    parsedPattern = json.loads(basicPattern)
    parsedPattern["name"] = name
else :
    name = input("Enter the name of the package: ")
    version = input("Enter the version of the package: ")
    dependencies = input("Enter the dependencies of the package: ")
    dependencies = dependencies.split(" ")
    prepare_info = input("Enter the the command to prepare the package (leave blanck if none) : ")
    make_info = input("Enter the the command to make the package (leave blanck if none) : ")
    test_info = input("Enter the the command to test the package (leave blanck if none) : ")
    install_info = input("Enter the the command to install the package (use $BUILD_ROOT for the install dir ) : ")
    special_info = input("Commands to be executed after the install : ")
    parsedPattern = json.loads(basicPattern)
    print(parsedPattern)
    parsedPattern["name"] = name
    parsedPattern["type"] = "src"
    parsedPattern["version"] = version
    for dependencie in dependencies:
        parsedPattern["dependencies"].append(dependencie)
    parsedPattern["info"]["prepare"] = prepare_info
    parsedPattern["info"]["make"] = make_info
    parsedPattern["info"]["test"] = test_info
    parsedPattern["info"]["install"] = install_info
    parsedPattern["info"]["special"] = special_info
sourcePath =("%s/%s*tar*" %  (input("Dir where the sources are located : "),name) )



tempDir = ("/tmp/%s.src.spm.tmp" % name)


system(("mkdir %s" % tempDir))
system(("tar -xf %s -C %s" % (sourcePath, tempDir)))

temp_spm = ("%s/%s.spm" % (tempDir, name))

spm = open(temp_spm, "w")
spm.write(json.dumps(parsedPattern, indent=4, sort_keys=True))
spm.close()

if argv[-1] == "e" :
    edit_cmd = "vim " + temp_spm
    print("Launching editor from spm file with : " + edit_cmd)
    system(edit_cmd)

packageArchivePath = ("%s/%s.src.spm.tar.gz" % (getcwd(),name))

system(("( cd %s && tar -cf %s * ) " % (tempDir,packageArchivePath )))
system(("rm -rf %s" % tempDir))




